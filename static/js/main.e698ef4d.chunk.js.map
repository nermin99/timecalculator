{"version":3,"sources":["utils/timecalculator.ts","utils/helpers.ts","components/calculator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reStroke","strTimeToSeconds","hours","minutes","seconds","replaceIntervals","str","reInterval","RegExp","matches","matchAll","match","stroke1","stroke2","t1","Number","replaceStrokes","t2","replace","toString","replaceDurations","evalStr","length","replaceAll","Function","error","isTimeStroke","reFront","reBack","test","secondsToStroke","Math","abs","hhmmss","Date","toISOString","slice","hhmm","secondsToDuration","re","stroke","exec","Object","entries","groups","filter","val","reduce","acc","unit","secondsToOutput","split","map","hour","minute","second","trim","replaceParentheses","input","res","evaluateInput","isOutput","str1","str2","str3","handleInput","strippedInput","preparedInput","Calculator","useState","result","setResult","handleEvent","fn","delay","timeout","args","clearTimeout","setTimeout","debounce","e","target","value","className","onSubmit","preventDefault","onChange","type","autoComplete","placeholder","autoFocus","App","href","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e698ef4d.chunk.js","sourcesContent":["// Matches time strokes on the form HH:MM and HH:MM:SS\r\nconst reStroke = '\\\\d{2}:\\\\d{2}(?::\\\\d{2})?'\r\n\r\nconst DAY_IN_SECONDS = 86400 // 24 * 60 * 60\r\n\r\n/**\r\n * Remove all whitespace from string.\r\n */\r\nexport const strip = (str: string) => str.replace(/\\s+/g, '')\r\n\r\n/**\r\n * Get total number of seconds from hours, minutes, and seconds.\r\n * (1, 1, 0) -> 3660\r\n */\r\nexport const strTimeToSeconds = (hours: number, minutes: number, seconds: number) => {\r\n  return hours * 3600 + minutes * 60 + seconds\r\n}\r\n\r\n/**\r\n * Replaces time intervals with the time duration in seconds.\r\n * '01:00>02:00' -> '3600'\r\n */\r\nexport const replaceIntervals = (str: string) => {\r\n  const reInterval = new RegExp(`(${reStroke})\\\\>(${reStroke})`, 'g')\r\n  const matches = str.matchAll(reInterval)\r\n\r\n  for (const [match, stroke1, stroke2] of matches) {\r\n    const t1 = Number(replaceStrokes(stroke1))\r\n    let t2 = Number(replaceStrokes(stroke2))\r\n    if (t1 > t2) t2 += DAY_IN_SECONDS\r\n    str = str.replace(match, (t2 - t1).toString())\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Converts time strokes (from midnight) to seconds.\r\n * '01:30' -> '5400'\r\n */\r\nexport const replaceStrokes = (str: string) => {\r\n  const re = /(\\d{2}):(\\d{2}):?(\\d{2})?/g\r\n  const matches = str.matchAll(re)\r\n\r\n  for (const [match, hours, minutes, seconds = 0] of matches) {\r\n    str = str.replace(\r\n      match,\r\n      strTimeToSeconds(Number(hours), Number(minutes), Number(seconds)).toString()\r\n    )\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Converts explicit time durations to seconds.\r\n * '1h30m20s' -> '5420'\r\n */\r\nexport const replaceDurations = (str: string) => {\r\n  // https://stackoverflow.com/questions/72016685/matching-hour-minute-second-hms-duration-string\r\n  const re = /\\b(?=\\w)(?:(\\d+)h)?(?:(\\d+)m)?(?:(\\d+)s)?\\b(?!\\w)/g\r\n  const matches = str.matchAll(re)\r\n\r\n  for (const [match, hours = 0, minutes = 0, seconds = 0] of matches) {\r\n    str = str.replace(\r\n      match,\r\n      strTimeToSeconds(Number(hours), Number(minutes), Number(seconds)).toString()\r\n    )\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Evaluate mathematical expressions.\r\n * '3600+3600' -> 7200\r\n */\r\nexport const evalStr = (str: string) => {\r\n  const reWhiteList = /[hms\\d\\+\\-\\>\\:\\(\\)]/g\r\n  if (str.length !== str.match(reWhiteList)?.length) return 0 // only allow characters from whitelist\r\n\r\n  str = str.replaceAll('--', '- -') // don't interpret as decrement operator\r\n  try {\r\n    return Function(`'use strict'; return (${str})`)()\r\n  } catch (error) {\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether time stroke or elapsed time is calculated.\r\n * Is a time stroke if any time duration is added/subtracted to any time stroke.\r\n * Regex matches e.g '18:30+1h' but not e.g '1h-30m' or '12:00>13:00'.\r\n */\r\nexport const isTimeStroke = (str: string) => {\r\n  const reFront = new RegExp(`\\\\d+[hms][+-]+${reStroke}`)\r\n  const reBack = new RegExp(`${reStroke}[+-]+\\\\d+[hms]`)\r\n  return reFront.test(str) || reBack.test(str)\r\n}\r\n\r\n/**\r\n * Converts total seconds (from midnight) to time stroke on the form HH:MM or HH:MM:SS.\r\n * 3660 -> '01:01'\r\n */\r\nexport const secondsToStroke = (seconds: number) => {\r\n  seconds = Math.abs(Number(seconds)) // can only deal with positive numbers\r\n  const hhmmss = new Date(seconds * 1000).toISOString().slice(11, 19)\r\n  const hhmm = hhmmss.slice(0, -3)\r\n  return hhmmss.slice(-2) === '00' ? hhmm : hhmmss\r\n}\r\n\r\n/**\r\n * Converts total seconds (from midnight) to time duration on the form hms.\r\n * 3620 -> '1h20s'\r\n */\r\nexport const secondsToDuration = (seconds: number) => {\r\n  const re = /(?<h>\\d{2}):(?<m>\\d{2}):?(?<s>\\d{2})?/g\r\n  const stroke = secondsToStroke(seconds)\r\n\r\n  const match = re.exec(stroke)\r\n  const str = Object.entries(match?.groups ?? [])\r\n    .filter(([, val]) => val && val !== '00')\r\n    .reduce((acc, [unit, val]) => acc + Number(val) + unit, '')\r\n  return seconds < 0 ? '-' + str : str\r\n}\r\n\r\n/**\r\n * Convert total seconds (from midnight) to representable output string.\r\n * 3620 -> '1 hour 20 seconds'\r\n */\r\nexport const secondsToOutput = (seconds: number) => {\r\n  const stroke = secondsToStroke(seconds)\r\n  const [hour, minute, second = 0] = stroke.split(':').map(Number)\r\n\r\n  let str = Object.entries({ hour, minute, second })\r\n    .filter(([, val]) => val !== 0)\r\n    .reduce((acc, [unit, val]) => `${acc} ${val} ${unit}${Math.abs(val) === 1 ? '' : 's'}`, '')\r\n    .trim()\r\n  if (seconds < 0) str = '-' + str\r\n  return str === '' ? '0 hours 0 minutes 0 seconds' : str\r\n}\r\n\r\n/**\r\n * Evaluates all (nested) parentheses and replaces them with their evaluated value.\r\n * '(1h30m+01:00)' -> '02:30'\r\n */\r\nexport const replaceParentheses = (input: string): string => {\r\n  const re = /\\([^(]*?\\)/g\r\n  const match = input.match(re)?.[0]\r\n  if (!match) return input\r\n\r\n  const res = evaluateInput(match)\r\n  return replaceParentheses(input.replace(match, res))\r\n}\r\n\r\n/**\r\n * Evaluates any input which has been stripped from spaces.\r\n * '9h-12:30>13:00' -> '8 hours 30 minutes'\r\n */\r\nexport const evaluateInput = (input: string, isOutput = false) => {\r\n  const str1 = replaceIntervals(input) // also used to determine if input is time stroke.\r\n  const str2 = replaceStrokes(str1)\r\n  const str3 = replaceDurations(str2)\r\n  const seconds = evalStr(str3)\r\n\r\n  if (isTimeStroke(str1)) {\r\n    return secondsToStroke(seconds)\r\n  } else {\r\n    return isOutput ? secondsToOutput(seconds) : secondsToDuration(seconds)\r\n  }\r\n}\r\n\r\n/**\r\n * Main function which takes the user input and returns the evaluated expression.\r\n */\r\nexport const handleInput = (input: string) => {\r\n  const strippedInput = strip(input)\r\n  const preparedInput = replaceParentheses(strippedInput)\r\n  return evaluateInput(preparedInput, true)\r\n}\r\n","/**\r\n * Debounce function\r\n * @param fn to be debounced\r\n * @param delay time in milliseconds\r\n */\r\nexport function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(\r\n  fn: F,\r\n  delay: number\r\n): (...args: Parameters<F>) => void {\r\n  let timeout: ReturnType<typeof setTimeout>\r\n  return (...args: Parameters<F>): void => {\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => fn(...args), delay)\r\n  }\r\n}\r\n\r\n/**\r\n * Modulo function\r\n * a % n\r\n */\r\nexport const mod = (a: number, n: number) => ((a % n) + n) % n\r\n","import React, { useState, ChangeEvent } from 'react'\r\nimport { handleInput } from 'src/utils/timecalculator'\r\nimport { debounce } from 'src/utils/helpers'\r\n\r\nimport './index.css'\r\n\r\nconst DEBOUNCE_DELAY = 500\r\n\r\nconst Calculator = () => {\r\n  const [result, setResult] = useState('')\r\n\r\n  const handleEvent = debounce((e: ChangeEvent<HTMLInputElement>) => {\r\n    const input = e.target.value\r\n\r\n    const result = handleInput(input)\r\n    const output = input === '' ? '' : result\r\n\r\n    setResult(output)\r\n  }, DEBOUNCE_DELAY)\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <form className=\"calculator-form\" onSubmit={(e) => e.preventDefault()}>\r\n        <input\r\n          onChange={handleEvent}\r\n          className=\"input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"08:00 > 17:00\"\r\n          autoFocus\r\n        />\r\n      </form>\r\n      <div className=\"result\">{result}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Calculator from './components/calculator'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <a href=\"https://github.com/nermin99/timecalculator\" className=\"ribbon\">\r\n        Check it out on GitHub!\r\n      </a>\r\n      <Calculator />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}