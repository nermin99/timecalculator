{"version":3,"sources":["utils/timecalculator.js","components/calculator/index.tsx","utils/helpers.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["operations","Map","op1","op2","timeDurationsToSeconds","str","matches","matchAll","match","hours","minutes","seconds","replace","parseInt","timeStrokesToSeconds","Number","replaceDurations","op","get","evalStr","Function","evalExpr","input","error","times","time","rem","hour","Math","floor","minute","second","secondsToTime","reBase","reFront","RegExp","reBack","test","isTimeStroke","Object","values","map","t","h","m","s","entries","unit","val","result","filter","join","Calculator","useState","setResult","handleEvent","fn","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","e","type","preventDefault","target","value","className","onKeyUp","autoComplete","placeholder","autoFocus","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6eb8ebd.chunk.js","sourcesContent":["const operations = new Map([\r\n  ['+', (op1, op2) => op1 + op2],\r\n  ['-', (op1, op2) => op1 - op2],\r\n  ['>', (op1, op2) => op2 - op1],\r\n])\r\n\r\n/**\r\n * Converts explicit time durations to seconds.\r\n * '1h30m20s' ---> '5420'\r\n */\r\nexport const timeDurationsToSeconds = (str) => {\r\n  const rx = /(\\d+h)?(\\d+m)?(\\d+s)?/g\r\n  const matches = str.matchAll(rx)\r\n\r\n  for (const [match, hours = 0, minutes = 0, seconds = 0] of matches) {\r\n    if (match === '') continue\r\n\r\n    str = str.replace(\r\n      match,\r\n      parseInt(hours) * 3600 + parseInt(minutes) * 60 + parseInt(seconds)\r\n    )\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Converts time strokes (from midnight) to seconds.\r\n * '01:30:40' ---> '5440'\r\n */\r\nexport const timeStrokesToSeconds = (str) => {\r\n  const re = /(\\d{2}):(\\d{2}):?(\\d{2})?/g\r\n\r\n  const matches = str.matchAll(re)\r\n  for (const [match, hours, minutes, seconds = 0] of matches) {\r\n    str = str.replace(\r\n      match,\r\n      Number(hours) * 3600 + Number(minutes) * 60 + Number(seconds)\r\n    )\r\n  }\r\n  return str\r\n}\r\n\r\n// '3600 > 7200' --> '3600'\r\nexport const replaceDurations = (str) => {\r\n  const re = /(\\d+)\\s?(>)\\s?(\\d+)/g\r\n\r\n  const matches = str.matchAll(re)\r\n  for (const [match, op1, op, op2] of matches) {\r\n    str = str.replace(match, operations.get(op)(op1, op2))\r\n  }\r\n  return str\r\n}\r\n\r\n// '3600 + 3600' --> 7200\r\n// /[hms\\d\\s\\+\\-\\>\\:\\(\\)]/g\r\nexport const evalStr = (str) => Function(`'use strict'; return (${str})`)()\r\n\r\n/**\r\n * Evaluate an expression like\r\n * '3600 > 7200 + 7200 > 10800' --> 7200\r\n */\r\nexport const evaluate = (str) => {\r\n  str = replaceDurations(str)\r\n  return evalStr(str)\r\n}\r\n\r\n/**\r\n * Get the number of hours, minutes and seconds\r\n * from the total seconds.\r\n */\r\nconst secondsToTime = (seconds) => {\r\n  const time = seconds\r\n  let rem = time\r\n\r\n  const times = {\r\n    hour: Math.floor(rem / (60 * 60)) % 24,\r\n    minute: Math.floor(time / 60) % 60,\r\n    second: time % 60,\r\n  }\r\n  return times\r\n}\r\n\r\n/**\r\n * Check whether time stroke or elapsed time is calculated.\r\n * Is a time stroke if any time duration is added/subtracted to any time stroke.\r\n * Regex matches e.g '18:30 + 1h' but not e.g '2h - 30m' or '12:00 > 13:00'.\r\n */\r\nexport const isTimeStroke = (str) => {\r\n  const reBase = '(\\\\d{2}):(\\\\d{2}):?(\\\\d{2})?'\r\n  const reFront = new RegExp(`\\\\d+[hms]\\\\s?[+-]\\\\s?${reBase}`)\r\n  const reBack = new RegExp(`${reBase}\\\\s?[+-]\\\\s?\\\\d+[hms]`)\r\n  return reFront.test(str) || reBack.test(str)\r\n}\r\n\r\nconst evaluateParentheses = (input) => {\r\n  const rx = /(\\([^(]*?\\))/g\r\n\r\n  const match = input.match(rx)?.[0]\r\n  if (!match) return input\r\n\r\n  const res = evaluate(timeDurationsToSeconds(timeStrokesToSeconds(match)))\r\n  return evaluateParentheses(input.replace(match, res))\r\n}\r\n\r\n/**\r\n * Main function which takes the user input.\r\n */\r\nexport const evalExpr = (input) => {\r\n  let str = input\r\n\r\n  str = timeStrokesToSeconds(str)\r\n  str = timeDurationsToSeconds(str)\r\n  str = replaceDurations(str)\r\n  try {\r\n    str = evalStr(str)\r\n  } catch (error) {\r\n    str = 0\r\n  }\r\n\r\n  const seconds = str\r\n  const times = secondsToTime(seconds)\r\n\r\n  if (isTimeStroke(input)) {\r\n    const [h, m, s] = Object.values(times).map((t) => (t < 10 ? `0${t}` : t))\r\n    return `${h}:${m}` + (s === '00' ? '' : `:${s}`)\r\n  } else {\r\n    const [h, m, s] = Object.entries(times).map(([unit, val]) =>\r\n      val === 0 ? '' : `${val} ${unit}${val === 1 ? '' : 's'}`\r\n    )\r\n    const result = [h, m, s].filter((str) => str !== '').join(' ')\r\n    return result === '' ? '0 hours 0 minutes 0 seconds' : result\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { evalExpr } from 'src/utils/timecalculator'\r\nimport { debounce } from 'src/utils/helpers'\r\n\r\nimport './index.css'\r\n\r\nconst DEBOUNCE_DELAY = 500\r\n\r\nconst Calculator = () => {\r\n  const [result, setResult] = useState('')\r\n\r\n  const handleEvent = debounce((e: any) => {\r\n    if (e.type === 'submit') e.preventDefault()\r\n\r\n    const input = e.target.value\r\n\r\n    const result = evalExpr(input)\r\n    const output = input === '' ? '' : result\r\n\r\n    setResult(output)\r\n  }, DEBOUNCE_DELAY)\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <form className=\"calculator-form\">\r\n        <input\r\n          onKeyUp={handleEvent}\r\n          className=\"input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"08:00 > 17:00\"\r\n          autoFocus\r\n        />\r\n      </form>\r\n      <div className=\"result\">{result}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator\r\n","/**\r\n * Debounce function\r\n * @param {Function} fn to be debounced\r\n * @param {Number} delay time in milliseconds\r\n */\r\nexport function debounce(fn, delay) {\r\n  let timer = null\r\n  return function () {\r\n    const context = this\r\n    const args = arguments\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Calculator from './components/calculator'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}