{"version":3,"sources":["utils/timecalculator.js","components/calculator/index.tsx","utils/helpers.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["operations","Map","op1","op2","operationsStr","keys","join","evaluate","expression","str","replace","match","exec","toReplace","op","Number","get","evalExpr","input","enclosedExprRegex","RegExp","currExpr","matches","matchAll","hours","minutes","seconds","parseInt","timeDurationsToSeconds","timeStrokesToSeconds","times","time","rem","hour","Math","floor","minute","second","secondsToTime","expr","flag","includes","test","isTimeStroke","Object","values","map","t","h","m","s","entries","unit","val","result","filter","Calculator","useState","setResult","handleEvent","fn","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","e","type","preventDefault","target","value","className","onKeyUp","autoComplete","placeholder","autoFocus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e72f5fb.chunk.js","sourcesContent":["const operations = new Map([\n  ['+', (op1, op2) => op1 + op2],\n  ['-', (op1, op2) => op1 - op2],\n  ['>', (op1, op2) => op2 - op1],\n])\n\nconst operationsStr = [...operations.keys()].join('') // +->\n\n/**\n * Converts explicit time durations to seconds.\n * 1h - 20m + 10s ---> 3600 - 1200 + 10\n */\nconst timeDurationsToSeconds = (str) => {\n  const rx = /(\\d+h)?(\\d+m)?(\\d+s)?/g\n  const matches = str.matchAll(rx)\n\n  for (const [match, hours = 0, minutes = 0, seconds = 0] of matches) {\n    if (match === '') continue\n\n    str = str.replace(\n      match,\n      parseInt(hours) * 3600 + parseInt(minutes) * 60 + parseInt(seconds)\n    )\n  }\n  return str\n}\n\n/**\n * Converts time strokes (from midnight) to seconds.\n * 01:00 > 02:00 ---> 3600 > 7200\n */\nconst timeStrokesToSeconds = (str) => {\n  const rx = /(\\d{2}):(\\d{2}):?(\\d{2})?/g\n  const matches = str.matchAll(rx)\n\n  for (const [match, hours, minutes, seconds = 0] of matches) {\n    str = str.replace(\n      match,\n      Number(hours) * 3600 + Number(minutes) * 60 + Number(seconds)\n    )\n  }\n  return str\n}\n\n/**\n * Evaluate an expression like\n * 3600 > 7200 --> 7200 - 3600 = 3600\n */\nconst evaluate = (expression) => {\n  // eslint-disable-next-line\n  const rx = /(\\d+)\\s?([\\+\\-\\>])\\s?(\\d+)/g\n\n  let str = `${expression}`.replace('(', '').replace(')', '')\n  const match = rx.exec(str)\n\n  if (match) {\n    let [toReplace, op1, op, op2] = match\n    op1 = Number(op1)\n    op2 = Number(op2)\n\n    str = str.replace(toReplace, operations.get(op)(op1, op2))\n\n    return evaluate(str)\n  } else {\n    return Number(str)\n  }\n}\n\n/**\n * Get the number of hours, minutes and seconds\n * from the total seconds.\n */\nconst secondsToTime = (seconds) => {\n  const time = seconds\n  let rem = time\n\n  const times = {\n    hour: Math.floor(rem / (60 * 60)) % 24,\n    minute: Math.floor(time / 60) % 60,\n    second: time % 60,\n  }\n  return times\n}\n\n/**\n * Check whether time stroke or elapsed time is calculated.\n * If '>' is in expression, not a timestroke.\n * Regex matches e.g '18:30 + 1h' but not e.g '2h - 30m'.\n * TODO: match e.g '1h + 18:30'\n */\nconst isTimeStroke = (expr) => {\n  let flag = !expr.includes('>') //\n  flag = flag && /\\d+\\s?[+-]\\s?\\d+[hms]/g.test(expr)\n  return flag\n}\n\n/**\n * Main function which takes the user input.\n */\nconst evalExpr = (input) => {\n  // const rx = /\\(.+?\\)/g\n  const enclosedExprRegex = new RegExp(`\\\\([\\\\d${operationsStr} ]+\\\\)`, 'g') // Match all inside (including) paranthesis\n  // const enclosedExprRegex = new RegExp(`[\\\\d${operationsStr} ]+`, 'g')\n\n  let currExpr = timeDurationsToSeconds(timeStrokesToSeconds(input))\n  let match = currExpr.match(enclosedExprRegex)\n\n  while (match) {\n    currExpr = currExpr.replace(match[0], evaluate(match[0]))\n    match = currExpr.match(enclosedExprRegex)\n  }\n\n  const seconds = evaluate(currExpr)\n  const times = secondsToTime(seconds)\n\n  if (isTimeStroke(input)) {\n    const [h, m, s] = Object.values(times).map((t) => (t < 10 ? `0${t}` : t))\n    return `${h}:${m}` + (s === '00' ? '' : `:${s}`)\n  } else {\n    const [h, m, s] = Object.entries(times).map(([unit, val]) =>\n      val === 0 ? '' : `${val} ${unit}${val === 1 ? '' : 's'}`\n    )\n    const result = [h, m, s].filter((str) => str !== '').join(' ')\n    return result === '' ? '0 hours 0 minutes 0 seconds' : result\n  }\n}\n\nexport default evalExpr\n","import React, { useState } from 'react'\nimport evalExpr from 'src/utils/timecalculator'\nimport { debounce } from 'src/utils/helpers'\n\nimport './index.css'\n\nconst DEBOUNCE_DELAY = 500\n\nconst Calculator = () => {\n  const [result, setResult] = useState('')\n\n  const handleEvent = debounce((e: any) => {\n    if (e.type === 'submit') e.preventDefault()\n\n    const input = e.target.value\n\n    const result = evalExpr(input)\n    const output = input === '' ? '' : result\n\n    setResult(output)\n  }, DEBOUNCE_DELAY)\n\n  return (\n    <div className=\"calculator\">\n      <form className=\"calculator-form\">\n        <input\n          onKeyUp={handleEvent}\n          className=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"08:00 > 17:00\"\n          autoFocus\n        />\n      </form>\n      <div className=\"result\">{result}</div>\n    </div>\n  )\n}\n\nexport default Calculator\n","/**\n * Debounce function\n * @param {Function} fn to be debounced\n * @param {Number} delay time in milliseconds\n */\nexport function debounce(fn, delay) {\n  let timer = null\n  return function () {\n    const context = this\n    const args = arguments\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(context, args)\n    }, delay)\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport Calculator from './components/calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}