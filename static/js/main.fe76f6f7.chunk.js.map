{"version":3,"sources":["utils/timecalculator.js","utils/helpers.js","components/calculator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reStroke","strTimeToSeconds","hours","minutes","seconds","Number","replaceIntervals","str","reInterval","matches","matchAll","match","stroke1","stroke2","t1","replaceStrokes","t2","replace","replaceDurations","evalStr","length","replaceAll","Function","error","isTimeStroke","reFront","RegExp","reBack","test","secondsToStroke","Math","abs","hhmmss","Date","toISOString","slice","hhmm","secondsToDuration","re","stroke","exec","Object","entries","groups","filter","val","reduce","acc","unit","secondsToOutput","split","map","hour","minute","second","trim","replaceParentheses","input","res","evaluateInput","isOutput","str1","str2","str3","handleInput","strippedInput","preparedInput","Calculator","useState","result","setResult","handleEvent","fn","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","e","type","preventDefault","target","value","className","onKeyUp","autoComplete","placeholder","autoFocus","App","href","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe76f6f7.chunk.js","sourcesContent":["// Matches time strokes on the form HH:MM and HH:MM:SS\r\nconst reStroke = '\\\\d{2}:\\\\d{2}(?::\\\\d{2})?'\r\n\r\n/**\r\n * Remove all whitespace from string.\r\n */\r\nexport const strip = (str) => str.replace(/\\s+/g, '')\r\n\r\n/**\r\n * Get total number of seconds from hours, minutes, and seconds.\r\n * ('1', '1', 0) --> 3660\r\n */\r\nexport const strTimeToSeconds = (hours, minutes, seconds) => {\r\n  return Number(hours) * 3600 + Number(minutes) * 60 + Number(seconds)\r\n}\r\n\r\n/**\r\n * Replaces time intervals with the time duration in seconds.\r\n * '01:00>02:00' --> '3600'\r\n */\r\nexport const replaceIntervals = (str) => {\r\n  const reInterval = `(${reStroke})\\\\>(${reStroke})`\r\n  const matches = str.matchAll(reInterval)\r\n\r\n  for (const [match, stroke1, stroke2] of matches) {\r\n    const t1 = replaceStrokes(stroke1)\r\n    const t2 = replaceStrokes(stroke2)\r\n    str = str.replace(match, Number(t2) - Number(t1))\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Converts time strokes (from midnight) to seconds.\r\n * '01:30' --> '5400'\r\n */\r\nexport const replaceStrokes = (str) => {\r\n  const re = /(\\d{2}):(\\d{2}):?(\\d{2})?/g\r\n  const matches = str.matchAll(re)\r\n\r\n  for (const [match, hours, minutes, seconds = 0] of matches) {\r\n    str = str.replace(match, strTimeToSeconds(hours, minutes, seconds))\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Converts explicit time durations to seconds.\r\n * '1h30m20s' --> '5420'\r\n */\r\nexport const replaceDurations = (str) => {\r\n  // https://stackoverflow.com/questions/72016685/matching-hour-minute-second-hms-duration-string\r\n  const re = /\\b(?=\\w)(?:(\\d+)h)?(?:(\\d+)m)?(?:(\\d+)s)?\\b(?!\\w)/g\r\n  const matches = str.matchAll(re)\r\n\r\n  for (const [match, hours = 0, minutes = 0, seconds = 0] of matches) {\r\n    str = str.replace(match, strTimeToSeconds(hours, minutes, seconds))\r\n  }\r\n  return str\r\n}\r\n\r\n/**\r\n * Evaluate mathematical expressions.\r\n * '3600+3600' --> 7200\r\n */\r\nexport const evalStr = (str) => {\r\n  const reWhiteList = /[hms\\d\\+\\-\\>\\:\\(\\)]/g\r\n  if (str.length !== str.match(reWhiteList)?.length) return 0 // only allow characters from whitelist\r\n\r\n  str = str.replaceAll('--', '- -') // don't interpret as decrement operator\r\n  try {\r\n    return Function(`'use strict'; return (${str})`)()\r\n  } catch (error) {\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether time stroke or elapsed time is calculated.\r\n * Is a time stroke if any time duration is added/subtracted to any time stroke.\r\n * Regex matches e.g '18:30+1h' but not e.g '1h-30m' or '12:00>13:00'.\r\n */\r\nexport const isTimeStroke = (str) => {\r\n  const reFront = new RegExp(`\\\\d+[hms][+-]+${reStroke}`)\r\n  const reBack = new RegExp(`${reStroke}[+-]+\\\\d+[hms]`)\r\n  return reFront.test(str) || reBack.test(str)\r\n}\r\n\r\n/**\r\n * Converts total seconds (from midnight) to time stroke on the form HH:MM or HH:MM:SS.\r\n * 3660 --> '01:01'\r\n */\r\nexport const secondsToStroke = (seconds) => {\r\n  seconds = Math.abs(Number(seconds)) // can only deal with positive numbers\r\n  const hhmmss = new Date(seconds * 1000).toISOString().slice(11, 19)\r\n  const hhmm = hhmmss.slice(0, -3)\r\n  return hhmmss.slice(-2) === '00' ? hhmm : hhmmss\r\n}\r\n\r\n/**\r\n * Converts total seconds (from midnight) to time duration on the form hms.\r\n * 3620 --> '1h20s'\r\n */\r\nexport const secondsToDuration = (seconds) => {\r\n  const re = /(?<h>\\d{2}):(?<m>\\d{2}):?(?<s>\\d{2})?/g\r\n  const stroke = secondsToStroke(seconds)\r\n\r\n  const match = re.exec(stroke)\r\n  const str = Object.entries(match.groups)\r\n    .filter(([, val]) => val && val !== '00')\r\n    .reduce((acc, [unit, val]) => acc + Number(val) + unit, '')\r\n  return seconds < 0 ? '-' + str : str\r\n}\r\n\r\n/**\r\n * Convert total seconds (from midnight) to representable output string.\r\n * 3620 --> '1 hour 20 seconds'\r\n */\r\nexport const secondsToOutput = (seconds) => {\r\n  const stroke = secondsToStroke(seconds)\r\n  const [hour, minute, second = 0] = stroke.split(':').map(Number)\r\n\r\n  let str = Object.entries({ hour, minute, second })\r\n    .filter(([, val]) => val !== 0)\r\n    .reduce((acc, [unit, val]) => `${acc} ${val} ${unit}${Math.abs(val) === 1 ? '' : 's'}`, '')\r\n    .trim()\r\n  if (seconds < 0) str = '-' + str\r\n  return str === '' ? '0 hours 0 minutes 0 seconds' : str\r\n}\r\n\r\n/**\r\n * Evaluates all (nested) parentheses and replaces them with their evaluated value.\r\n * '(1h30m+01:00)' --> '02:30'\r\n */\r\nexport const replaceParentheses = (input) => {\r\n  const re = /\\([^(]*?\\)/g\r\n  const match = input.match(re)?.[0]\r\n  if (!match) return input\r\n\r\n  const res = evaluateInput(match)\r\n  return replaceParentheses(input.replace(match, res))\r\n}\r\n\r\n/**\r\n * Evaluates any input which has been stripped from spaces.\r\n * '9h-12:30>13:00' --> '8 hours 30 minutes'\r\n */\r\nexport const evaluateInput = (input, isOutput = false) => {\r\n  const str1 = replaceIntervals(input) // also used to determine if input is time stroke.\r\n  const str2 = replaceStrokes(str1)\r\n  const str3 = replaceDurations(str2)\r\n  const seconds = evalStr(str3)\r\n\r\n  if (isTimeStroke(str1)) {\r\n    return secondsToStroke(seconds)\r\n  } else {\r\n    return isOutput ? secondsToOutput(seconds) : secondsToDuration(seconds)\r\n  }\r\n}\r\n\r\n/**\r\n * Main function which takes the user input and returns the evaluated expression.\r\n */\r\nexport const handleInput = (input) => {\r\n  const strippedInput = strip(input)\r\n  const preparedInput = replaceParentheses(strippedInput)\r\n  return evaluateInput(preparedInput, true)\r\n}\r\n","/**\r\n * Debounce function\r\n * @param {Function} fn to be debounced\r\n * @param {Number} delay time in milliseconds\r\n */\r\nexport function debounce(fn, delay) {\r\n  let timer = null\r\n  return function () {\r\n    const context = this\r\n    const args = arguments\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\n/**\r\n * Modulo function\r\n * a % n\r\n */\r\nexport const mod = (a, n) => ((a % n) + n) % n\r\n","import React, { useState } from 'react'\r\nimport { handleInput } from 'src/utils/timecalculator'\r\nimport { debounce } from 'src/utils/helpers'\r\n\r\nimport './index.css'\r\n\r\nconst DEBOUNCE_DELAY = 500\r\n\r\nconst Calculator = () => {\r\n  const [result, setResult] = useState('')\r\n\r\n  const handleEvent = debounce((e: any) => {\r\n    if (e.type === 'submit') e.preventDefault()\r\n\r\n    const input = e.target.value\r\n\r\n    const result = handleInput(input)\r\n    const output = input === '' ? '' : result\r\n\r\n    setResult(output)\r\n  }, DEBOUNCE_DELAY)\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <form className=\"calculator-form\">\r\n        <input\r\n          onKeyUp={handleEvent}\r\n          className=\"input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"08:00 > 17:00\"\r\n          autoFocus\r\n        />\r\n      </form>\r\n      <div className=\"result\">{result}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Calculator from './components/calculator'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <a href=\"https://github.com/nermin99/timecalculator\" className=\"ribbon\">\r\n        Check it out on GitHub!\r\n      </a>\r\n      <Calculator />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}